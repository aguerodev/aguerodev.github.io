{
  "hash": "506e520b9baefaf844bfcdb6a92c6e9e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Automatización de la descarga de datos de delitos en Costa Rica\"\ndescription: \"En este post aprenderemos cómo automatizar desde R la descarga, unificación y limpieza de datos sobre delitos en Costa Rica, obtenidos desde la plataforma del Poder Judicial.\"\ndate: 2025-03-04\ndate-modified: 2025-03-04\ncategories: [\"webscraping\", \"selenider\"] \nlang: \"es\"\nimage: images/oij.png\ntoc: true\ncode-line-numbers: true\ncode-copy: true\ntoc-location: left\nformat: html\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true\nauthor:\n  - name: Carlos Agüero B\n    affiliation: Aprende Tidyverse\n    affiliation-url: https://aprendetidyverse.com/\ncitation: true\n---\n\n\n\n## Introducción: ¿Por qué hacer esto?\n\nTodos los días escuchamos en las noticias acerca del incremento en los homicidios y la inseguridad en Costa Rica, pero, siempre que lo oigo, y sobre todo cifras, lo primero que pienso es ¿y de dónde sacaron los datos? ¿Cómo hicieron el cálculo? (Cosa que, creo, los medios, por transparencia, siempre deberían publicar: los datasets y los cálculos, ya sea en un Excel, un notebook de Python o lo que sea). Es fundamental que, como ciudadanos, dispongamos de acceso a la información para que podamos comprobar de manera independiente lo que realmente sucede en el país.\n\n\nCon esa idea en mente, surge este mini tutorial, en el cual mostraré, paso a paso, cómo utilizar R para descargar, unificar y limpiar la información proporcionada por el Poder Judicial.\n\n## Reto 1: Automatizar la descarga\n\nEl primer problema se presentó cuando noté que la plataforma solo permite descargar los datos un año a la vez (o, al menos, a mí me da error si intento descargar varios años juntos). Hacerlo manualmente para 10 años no era opción para mí. Soy de ese tipo de persona que prefiere pasar dos horas automatizando una tarea que podría hacerse en 15 minutos manualmente. Eso debe tener un nombre o, como mínimo, estar tipificado en el DSM-5.\n\nPara lograr esto, vamos a utilizar los paquetes [selenider](https://ashbythorpe.github.io/selenider/index.html) y [chromote](https://rstudio.github.io/chromote/), una combinación que nos permite hacer web scraping de forma sencilla y, además, resuelve muchos de los problemas que teníamos al trabajar con [RSelenium](https://docs.ropensci.org/RSelenium/).\n\n### Selenider en 1 minuto:\n\n1. Levantas una sesión que controla el navegador por defecto, Chrome.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(selenider)\n\nsession <- selenider_session(\n  \"chromote\",\n  timeout = 10,\n  options = chromote_options(headless = FALSE)\n)\n```\n:::\n\n\n\n2. Abrir una url \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_url(\"https://www.r-project.org/\")\n```\n:::\n\n\n\n3. Seleccionas elementos usando CSS o XPath.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# selecciona los elementos con el id css rStudioHeader\nheader <- s(\"#rStudioHeader\") \n```\n:::\n\n\n\n3. Realizas acciones como clic, llenar información, hacer scroll, etc.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns(\".claseBoton\") |>\n  elem_click()\n```\n:::\n\n\n\n1. `elem_click()`\n\nRealiza un clic en el elemento especificado.\n\n2. `elem_right_click()`\n\nEjecuta un clic derecho sobre el elemento.\n\n3. `elem_double_click()`\n\nRealiza un doble clic en el elemento.\n\n4. `elem_hover()`\n\nPosiciona el cursor sobre el elemento, simulando la acción de pasar el mouse por encima.\n\n5. `elem_scroll_to()`\n\nDesplaza la vista hasta el elemento indicado, lo cual es útil si el elemento no está visible antes de realizar un clic o interacción.\n\n\nVeamos cómo es el proceso manual para identificar qué es lo que debemos automatizar:\n\n1. Indicar las fechas de inicio y fin.\n\n![](images/fechas_oij.png){width=30%}\n\n2. Indicar el lugar del suceso.\n\n![](images/lugar_suceso.png){width=30%}\n\n3. Seleccionar la categoría delictiva.\n\n![](images/categoria_delictiva.png){width=30%}\n\n4. Indicar si se trata de víctima policial.\n\n![](images/victima_policial.png){width=30%}\n\n5. Hacer clic en el botón de descargar Excel.\n\n![](images/guardar_excel.png){width=25%}\n\nCódigo completo de la descargar limpieza de los datos\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(rvest)\nlibrary(selenider)\nlibrary(lubridate)\nlibrary(fs)\nlibrary(purrr)\nlibrary(janitor)\nlibrary(glue)\nlibrary(chromote)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(stringr)\n\nwait_for_download <- function(download_dir, filename, timeout = 60) {\n  start_time <- Sys.time()\n  file_path <- file.path(download_dir, filename)\n  while (\n    as.numeric(difftime(Sys.time(), start_time, units = \"secs\")) <= timeout\n  ) {\n    if (\n      file.exists(file_path) &&\n        length(list.files(download_dir, pattern = \"\\\\.crdownload$\")) == 0\n    ) {\n      return(TRUE)\n    }\n    Sys.sleep(1)\n  }\n  cli::cli_abort(\"Se acabó el tiempo de espera\")\n}\n\ndescargar_dataset_pj <- function(\n  date = lubridate::today(),\n  download_dir = \"data\",\n  filename = \"Estadisticas.xls\"\n) {\n  dir.create(download_dir, showWarnings = FALSE, recursive = TRUE)\n  full_path <- file.path(download_dir, filename)\n\n  session <- selenider_session(\n    \"chromote\",\n    timeout = 10,\n    options = chromote_options(headless = TRUE)\n  )\n  session$driver$Browser$setDownloadBehavior(\n    behavior = \"allow\",\n    downloadPath = normalizePath(download_dir)\n  )\n\n  open_url(\"https://pjenlinea3.poder-judicial.go.cr/estadisticasoij/\")\n\n  start_date <- format(date, \"%d/%m/%Y\")\n  end_date <- update(date, month = 12, day = 31)\n  end_date <- if_else(end_date > today(), today(), end_date)\n  end_date <- format(end_date, \"%d/%m/%Y\")\n\n  execute_js_expr(\n    \"document.getElementById('txtFechaFinal').removeAttribute('readonly',0);\"\n  )\n  execute_js_expr(glue(\n    \"document.getElementById('txtFechaFinal').value = '{end_date}';\",\n  ))\n\n  execute_js_expr(\n    \"document.getElementById('txtFechaInicio').removeAttribute('readonly',0);\"\n  )\n  execute_js_expr(glue(\n    \"document.getElementById('txtFechaInicio').value = '{start_date}';\",\n  ))\n\n  execute_js_expr(\"document.getElementById('chbTodoPais').click();\")\n  execute_js_expr(\"document.getElementById('chbTodoDelitos').click();\")\n  execute_js_expr(\"document.getElementById('chbTodaVictima').click();\")\n\n  execute_js_expr(\"document.getElementById('btnExcel').click();\")\n\n  wait_for_download(download_dir, filename)\n\n  new_filename <- paste0(\"delitos_\", format(date, \"%Y-%m-%d\"), \".html\")\n  new_path <- file.path(download_dir, new_filename)\n  fs::file_move(full_path, new_path)\n\n  return(new_path)\n}\n\n.years <- ymd(\"2025-01-01\") - years(0:11)\n\ndf <- map(\n  .years,\n  \\(x) {\n    .file <- descargar_dataset_pj(date = x)\n    df <- read_html(.file) |>\n      html_table()\n    df <- df[[1]]\n    return(df)\n  },\n  .progress = TRUE\n) |>\n  list_rbind()\n\ndf |>\n  clean_names() |>\n  mutate(\n    across(where(is.character), str_to_title),\n    fecha = ymd(fecha)\n  ) |>\n  readr::write_rds(glue(\"data/delitos_{today()}.rds\"))\n```\n:::\n\n\n\n\n\n## Reto 2: Problemas con el archivo descargado\n\nLuego de realizar la descarga apareció un nuevo problema. Al intentar abrir desde R el archivo, me encontré con un error: el archivo parecía corrupto o mal formateado. Era raro, porque si abría el archivo directamente desde Excel, todo funcionaba bien.\n\nRevisando el código fuente de la web, pude encontrar que el archivo se genera a partir de una tabla HTML que se codifica en Base64, asignándole la extensión \".xls\" y un MIME type de Excel (Excel viejito). Esto quiere decir que, aunque se pretende que sea un archivo de Excel, el contenido real es HTML y no el formato binario nativo de Excel (xls). Excel, que siempre que puede resuelve, logra detectar ese contenido y mostrar la tabla correctamente, pero el paquete readxl —que utiliza la librería libxls— requiere específicamente el formato binario de Excel para poder abrirlo. Por eso, al intentar abrirlo en R se produce el error *libxls error: Unable to open file*, porque, **sorpresa, ¡no es un archivo de Excel!**\n\nLa solución fue sencilla, si se trata de un archivo `HTML`, basta con cambiarle la extensión a `.html` y usar la función `read_html` del paquete `rvest`. Una vez resuelto esto, quedó completamente automatizado el proceso de descarga de 10 años de registros en un clic.\n\n## Reto 3: Limpieza y normalización de los datos\n\nA partir de aquí, el trabajo de limpieza es muy corto. Se normalizan los nombres de las columnas y, además, se ajustan las variables de tipo texto para evitar tenerlas únicamente en mayúsculas.\n\nAquí, alguien podría preguntarse: ¿por qué, entonces, no descargar directamente el archivo `.csv` y listo? Pasa que, por algún motivo que desconozco, al archivo CSV le falta la columna \"distrito\". Asumo que está relacionado con la forma en que se genera desde la tabla HTML original, pero, a decir verdad, no lo investigué.\n\nPuedes descargar los datos en el siguiente enlace [descargar datos](../data/delitos_2025-03-03.zip)\n\n## ¿Y ahora qué?\n\nEsta sería la primera parte del trabajo. Ahora que tenemos los datos, estamos listos para realizar un análisis. En el siguiente post hablaremos sobre el tema de los homicidios en Costa Rica, su evolución, y podremos salir de la duda que inició todo: ¿es realmente el aumento de la inseguridad solo un tema de percepción [(como hace un tiempo decía un ministro en un podcast)](https://www.crhoy.com/nacionales/nuevo-podcast-del-gobierno-plantea-crisis-de-homicidios-como-un-tema-de-percepcion/)? Spoiler:\n\n![](https://mystickermania.com/cdn/stickers/memes/bugs-bunnys-no-meme-512x512.png){width=25%}\n\nFinalmente, un reconocimiento especial al Poder Judicial por el esfuerzo y la transparencia de poner estos datos a disposición abierta de la ciudadanía; sin embargo, es importante mencionar que la plataforma todavía tiene puntos destacables de mejora en la web.\n\n¡Nos vemos en ese próximo post!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}