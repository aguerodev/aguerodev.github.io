{
  "hash": "b73abf27b2920758e9d5a214601cc212",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cómo crear leyendas personalizadas en tus gráficos utilizando ggplot2\"\ndescription: \"Explora las nuevas funcionalidades de ggplot2 3.5 y lleva tus gráficos al próximo nivel personalizando tus leyendas hasta el último detalle\"\ndate: 2024-11-01\nauthor: \"Carlos Aguero B\"\ncategories: ['Guías Paso a Paso', 'ggplot2']\nlang: \"es\"\nimage: images/legend_example.png\ntoc: true\ncode-line-numbers: true\ncode-copy: true\ntoc-location: left\nexecute: \n  freeze: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\nCada tanto, cuando tengo tiempo libre, me siento a revisar artículos y noticias. En Twitter, me topé con el siguiente artículo del Wall Street Journal, titulado **'The Rough Years That Turned Gen Z Into America’s Most Disillusioned Voters'**[^articulo]. Este habla sobre cómo lo que se puede entender como generación Z tiene menores expectativas de tener una carrera, entre otras cuestiones. Pero lo que me llamó la atención inmediatamente fue este gráfico tan curioso.\n\n\n[^articulo]: Restuccia, Andrew, y Eliza Collins. 2024. \"The Rough Years That Turned Gen Z Into America’s Most Disillusioned Voters.\" The Wall Street Journal, March 15. https://archive.ph/0E2Bw ([Leer publicación](https://archive.ph/0E2Bw)).\n\n\n![Imagen publicada por [The Wall Street Journal](https://www.wsj.com/politics/elections/gen-z-voters-election-tiktok-5bcdc524)](images/ejemplo_twsj.png){#fig-original}\n\nResulta que justo en las últimas semanas, el blog de [tidyverse.org](https://www.tidyverse.org) publicaba algunas de las [novedades de ggplot2 3.5](https://www.tidyverse.org/blog/2024/02/ggplot2-3-5-0-legends/), entre las que se encuentran el poder agregar leyendas personalizadas utilizando el paquete grid. Ahora, entonces, me entra la duda de si es posible recrear este gráfico usando código de R, vamos a intentarlo.\n\nEste no es un tutorial; el objetivo no es que entiendas cómo funciona todo, ya que el código es algo largo, sino que lo tengas como referencia y exploremos juntos las capacidades del paquete.\n\n## Paso 1 : Cargar las dependencias\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(ggh4x)\nlibrary(ggrepel)\nlibrary(colorspace)\n```\n:::\n\n\n\n## Paso 2: Crear la primer leyenda\n\nEl paquete grid nos permite crear gráficos, pero a diferencia de ggplot2, grid nos provee de funciones más de bajo nivel, como dibujar un círculo, una línea, un rectángulo, lo cual nos da mucha libertad para componer estos elementos de la forma en que queramos.\n\n::: {.column-margin}\nUna de las mejores lecturas para comprender el funcionamiento del paquete grid y su relación con ggplot2 es el libro [R Graphics, Second Edition, de Paul Murrell](https://www.stat.auckland.ac.nz/~paul/RG2e/), el autor del paquete grid.\n:::\n\n\nUsaremos las funciones `circleGrob`, `segmentsGrob` y `textGrob` para replicar la primera leyenda, que en la [@fig-original] se encuentra a la derecha.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncirculos <- circleGrob(\n  r = 0.07,\n  x = c(0.5, 0.35),\n  y = c(0.5,0.5),\n  gp = gpar(lwd = 1)\n)\n\nlineas <- segmentsGrob(\n  x0 = c(0.5,0.35),\n  x1 = c(0.5,0.35),\n  y0 = c(0.35,0.65),\n  y1 = c(0.42,0.58),\n  gp =  gpar(lwd = 1)\n)\n\ntexto <- textGrob(\n  label = c(\"Lower than start\",\"Higher than start\"),\n  x = c(0.5,0.35),\n  y = c(0.3, 0.75),\n  gp = gpar(lwd = 2, fontsize = 12),\n  )\n\nlegend1 <- gTree(children = gList(circulos, lineas,texto))\ngrid.draw(legend1)\n```\n\n::: {.cell-output-display}\n![](002_custom_legend_ggplot2_files/figure-html/unnamed-chunk-2-1.png){width=1600}\n:::\n:::\n\n\n\nNo está mal, se parece bastante. Ahora vamos a utilizar la función `guides` y la nueva función `guide_custom` para agregar este objeto llamado `legend1` a un gráfico de ggplot2. Además, se hacen algunos ajustes de tamaño y márgenes con la función `theme.`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  guides(\n    custom = guide_custom(\n    width = unit(5,\"cm\"),\n    height = unit(3,\"cm\"),\n    grob = legend1,\n    order = 1\n  )) + theme(\n    legend.position = \"top\",\n    legend.justification = \"center\",\n    legend.margin = margin(t = -10,b = -20,0,0),\n    plot.margin = margin(t = 10,10,10,10)\n  )\n```\n\n::: {.cell-output-display}\n![](002_custom_legend_ggplot2_files/figure-html/unnamed-chunk-3-1.png){width=3400}\n:::\n:::\n\n\n\n\n## Paso 3: Crear la segunda leyenda\n\nVemos que, a diferencia de la primera leyenda, esta segunda [@fig-original], que se encuentra a la izquierda del gráfico, es un poco más compleja; tiene más formas, textos y colores. Sin embargo, aunque requiere más código, no es en sí una tarea complicada.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrect1 <- roundrectGrob(\n  r= unit(0.5, \"snpc\"),\n  x = 0.10,\n  y = 0.5,\n  width = 0.2,\n  height =  0.065,\n  gp = gpar(lty = 0, fill = \"#b4d6f0\")\n)\n\nrect2 <- roundrectGrob(\n  r = unit(0.5, \"snpc\"),\n  x = 0.325,\n  y = 0.5,\n  width = 0.25,\n  height =  0.065,\n  gp = gpar(lty = 0, fill = \"#76bbe8\")\n)\n\nrect3 <- roundrectGrob(\n  r = unit(0.5, \"snpc\"),\n  x = 0.575,\n  y = 0.5,\n  width = 0.25,\n  height = 0.065,\n  gp = gpar(lty = 0, fill = \"#2598dd\")\n)\n\nrect4 <- roundrectGrob(\n  r = unit(0.5, \"snpc\"),\n  x = 0.825,\n  y = 0.5,\n  width = 0.25,\n  height = 0.065,\n  gp = gpar(lty = 0, fill = \"#673c8e\")\n)\n\npoint1 <- circleGrob(\n  r = 0.05,\n  x = c(0.02,0.2,0.45,0.70),\n  y = c(0.5,0.5,0.5,0.5,0.5),\n  gp = gpar(lty = 0, fill = c(\"#b2d9f9\",\"#559dd7\",\"#1d70c9\",\"#09217a\"))\n)\n\nstick1 <- segmentsGrob(\n  x0 =c(0.02,0.2,0.45,0.70),\n  x1 = c(0.02,0.2,0.45,0.70),\n  y0 = c(0.65,0.42,0.65,0.42),\n  y1 = c(0.58,0.35,0.58,0.35),\n  gp =  gpar(lwd = 2)\n)\n\nlabel1 <- textGrob(\n  label = c(\"Baby\\nBoomers\",\"Gen X\", \"Milenials\", \"Gen Z\"),\n  x = c(0.02,0.2,0.45,0.70),\n  y = c(0.8,0.3, 0.75, 0.3),\n  gp = gpar(lwd = 2, fontsize = 12, lineheight = 0.7))\n\ncircle1 <- circleGrob(\n  r = 0.080,\n  x = c(0.02,0.2,0.45,0.70),\n  y = c(0.5,0.5,0.5,0.5),\n  gp = gpar(lty = 1, fill = NA)\n)\n\nlegend2 <- gTree(children = gList(rect1, rect2, rect3,rect4,\n                                 point1,stick1,label1,circle1))\ngrid.draw(legend2)\n```\n\n::: {.cell-output-display}\n![](002_custom_legend_ggplot2_files/figure-html/unnamed-chunk-4-1.png){width=2400}\n:::\n:::\n\n\n\nAhora, al igual que en el paso anterior, vamos a agregarlo a un gráfico con ggplot2 para verificar cómo se ve.\n\n::: {.callout-note appearance=\"simple\"}\nAl ajustar la dimensión de los elementos, es mejor verificarla contra la versión que ya está integrada en el plot de ggplot2, porque pueden variar mucho.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  guides(\n    custom = guide_custom(\n    width = unit(5,\"cm\"),\n    height = unit(3,\"cm\"),\n    grob = legend2,\n    order = 1\n  )) + theme(\n    legend.position = \"top\",\n    legend.justification = \"center\",\n    legend.margin = margin(t = -10,b = -20,0,0),\n    plot.margin = margin(t = 10,10,10,10)\n  )\n```\n\n::: {.cell-output-display}\n![](002_custom_legend_ggplot2_files/figure-html/unnamed-chunk-5-1.png){width=3400}\n:::\n:::\n\n\n\n\n## Paso 4: Necesitamos los datos\n\nLlega el momento de replicar el gráfico y necesitamos datos. Para esto, después de varios intentos fallidos y un dolor de cabeza de por medio, me topé con esta herramienta: [plot digitizer](https://plotdigitizer.com), que nos facilita el pasar de un plot ya creado a los datos.\n\nA continuación, mucho código de poco valor pero necesario para obtener los datos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf1 <- tibble::tribble(\n                             ~fecha,                 ~valor,\n               1975.99610136452,    30.306338028169,\n               1976.77582846004,   31.4007042253521,\n               1978.49122807018,   31.9478873239437,\n               1978.72514619883,   33.2767605633803,\n               1979.19298245614,   34.3711267605634,\n                 1979.738791423,   36.0908450704225,\n               1980.36257309942,   37.1070422535211,\n               1981.37621832359,   36.0908450704225,\n               1982.31189083821,   35.7,\n               1983.63742690058,   36.4035211267606,\n                1984.5730994152,   37.2633802816901,\n               1985.27485380117,   38.9049295774648,\n               1985.82066276803,   40.0774647887324,\n                1986.6783625731,   42.7352112676056,\n               1986.28849902534,   41.3281690140845,\n               1987.30214424951,   44.2204225352113,\n               1987.92592592593,   45.3929577464789,\n               1989.56335282651,   45.9401408450704,\n               1990.49902534113,   47.7380281690141,\n               1989.95321637427,    46.956338028169,\n                1991.2007797271,   49.3014084507042,\n               1991.66861598441,   51.0211267605634,\n               1992.05847953216,   51.9591549295775,\n               1994.24171539961,   54.2260563380282,\n               1994.24171539961,   54.2260563380282,\n               1995.56725146199,   54.8514084507042,\n               1995.56725146199,   54.8514084507042,\n               1996.50292397661,   55.7112676056338,\n               1997.90643274854,   56.2584507042254,\n               1998.99805068226,   56.1,\n               2000.40155945419,   55.7112676056338,\n               2000.40155945419,   55.7112676056338,\n               2001.57115009747,   56.6492957746479,\n               2003.05263157895,   56.3366197183098,\n               2004.06627680312,   55.9457746478873,\n               2004.06627680312,   55.9457746478873,\n                2005.3918128655,   56.8056338028169,\n               2006.48343079922,   56.0239436619718,\n               2006.48343079922,   56.0239436619718,\n               2007.34113060429,   57.1964788732394,\n               2008.19883040936,    58.369014084507,\n               2009.21247563353,   58.9943661971831,\n               2010.77192982456,   59.0725352112676,\n               2011.86354775828,   58.1345070422535,\n               2012.56530214425,   56.9,\n               2013.34502923977,   56.4147887323944,\n               2013.34502923977,   56.4147887323944,\n               2014.82651072125,    57.430985915493,\n               2016.85380116959,   56.8056338028169,\n               2016.85380116959,   56.8056338028169,\n               2018.02339181287,   55.5549295774648,\n               2018.49122807018,   54.3042253521127,\n               2018.80311890838,   53.1316901408451,\n               2018.80311890838,   53.1316901408451,\n               2019.19298245614,    52.506338028169,\n               2019.19298245614,    52.506338028169,\n               2020.28460038986,    51.880985915493,\n               2020.28460038986,    51.880985915493,\n               2020.75243664717,   50.3957746478873,\n               2020.75243664717,   50.3957746478873,\n               2020.90838206628,   49.2232394366197,\n               2020.90838206628,   49.2232394366197,\n               2021.06432748538,   48.1288732394366,\n               2021.06432748538,   48.1288732394366,\n               2022,   46.8\n             )|> \n  mutate(\n    fecha = round(fecha),\n    fecha = ymd(paste0(fecha,\"-01-01\"))\n  ) |> \n  summarise(\n    valor = round(mean(valor),1),\n    .by = fecha\n  ) |> \n  mutate(\n    pregunta = \"Expect graduate or\\nprofessional degree\"\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf2 <- tibble::tribble(\n                            ~fecha,                 ~valor,\n              1976.40358744395,   48.1413978494624,\n              1976.83408071749,   49.2682795698925,\n              1977.55156950673,   50.1134408602151,\n              1978.62780269058,   50.6064516129032,\n              1979.20179372197,   51.5924731182796,\n              1979.34529147982,   52.5784946236559,\n              1979.63228699552,   53.6349462365591,\n              1979.99103139013,    54.902688172043,\n              1980.42152466368,   55.8887096774194,\n              1981.13901345291,   55.9591397849462,\n              1982,   56.1,\n               1983.5067264574,   54.1279569892473,\n               1984.7264573991,   53.9870967741935,\n              1985.30044843049,    54.902688172043,\n              1985.87443946188,   56.1704301075269,\n              1986.59192825112,    57.297311827957,\n              1986.87892376682,   58.2129032258065,\n               1987.7399103139,    59.058064516129,\n              1988.60089686099,   59.9736559139785,\n              1989.31838565022,   60.3962365591398,\n              1989.82062780269,   61.7344086021505,\n              1990.25112107623,   62.9317204301075,\n              1991.54260089686,   63.4247311827957,\n              1992.04484304933,   64.9741935483871,\n              1992.83408071749,   65.8193548387097,\n              1993.98206278027,   66.1010752688172,\n              1995.56053811659,    66.241935483871,\n              1996.42152466368,   67.2983870967742,\n              1997.13901345291,   67.8618279569892,\n              1998            ,   69.2,\n              1999.79372197309,    69.763440860215,\n              2000.22421524664,   70.7494623655914,\n              2001.51569506726,   70.4677419354839,\n              2002.66367713004,    69.833870967742,\n              2003.38116591928,    68.636559139785,\n              2004.74439461883,   68.7069892473118,\n              2005.39013452915,    69.763440860215,\n              2006.32286995516,   68.7774193548387,\n              2007.61434977578,   68.9182795698925,\n               2008.2600896861,   68.1435483870968,\n              2009.19282511211,   68.7774193548387,\n              2010.48430493274,   68.3548387096774,\n              2011,   68.4252688172043,\n              2012.           ,   61.1,\n              2013.42600896861,   64.4532258064516,\n              2013.64125560538,   65.3263440860215,\n              2013.78475336323,   64.1994623655914,\n              2013.92825112108,   62.7908602150538,\n              2014.21524663677,   61.3822580645161,\n              2015.43497757848,   61.9456989247312,\n              2016.86995515695,    62.086559139785,\n              2018.37668161435,   62.2274193548387,\n              2019.23766816144,   61.3822580645161,\n              2019.81165919282,    60.255376344086,\n              2020.52914798206,   58.6354838709677,\n              2021.31838565022,   57.0155913978495,\n              2022            ,   52.1\n            ) |> \n  mutate(\n    fecha = round(fecha),\n    fecha = ymd(paste0(fecha,\"-01-01\"))\n  ) |> \n  summarise(\n    valor = round(mean(valor),1),\n    .by = fecha\n  ) |> \n  mutate(\n    pregunta = \"Expect professional job\"\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf3 <- tibble::tribble(\n                         ~fecha,                 ~valor,\n           1976.04830917874,   47.2409090909091,\n           1977.05314009662,               48.4,\n           1978.21256038647,              49.25,\n           1979.75845410628,   49.0181818181818,\n           1980.45410628019,   51.0272727272727,\n           1981.45410628019,   53.0272727272727,\n           1982,   53.5,\n           1983.46859903382,   55.8954545454545,\n           1984.24154589372,   57.1318181818182,\n           1984.70531400966,   58.2909090909091,\n           1985.71014492754,   58.7545454545455,\n           1986.56038647343,   59.7590909090909,\n           1987.33333333333,   60.9954545454545,\n           1988.49275362319,   61.8454545454545,\n           1989.42028985507,   62.4636363636364,\n           1990.27053140097,   62.9272727272727,\n           1991.42995169082,   63.6227272727273,\n            1992.3574879227,   62.6181818181818,\n            1993.2077294686,   61.3045454545455,\n           1994.21256038647,   60.6863636363636,\n           1995.44927536232,   60.3772727272727,\n           1996.1,   60.6090909090909,\n           1998,   62.0,\n           1999.77777777778,   63.0818181818182,\n           2000.93719806763,   63.6227272727273,\n           2001.86473429952,   62.5409090909091,\n           2002.86956521739,   61.6136363636364,\n           2003.25603864734,   60.3772727272727,\n           2003.71980676329,   59.1409090909091,\n           2005.11111111111,   59.1409090909091,\n           2006.27053140097,   59.2954545454545,\n           2007.42995169082,   58.7545454545455,\n           2008.51207729469,   58.1363636363636,\n            2009,   57.1318181818182,\n            201,   57.1318181818182,\n           2011.1,   56.6681818181818,\n           2012,   59.6,\n           2013.38164251208,   58.7545454545455,\n           2013.45893719807,   59.6045454545455,\n            2014.7729468599,   58.9863636363636,\n           2015.54589371981,   57.9818181818182,\n           2016.55072463768,   56.8227272727273,\n           2017.71014492754,   54.8909090909091,\n           2017.71014492754,   54.8909090909091,\n           2018.48309178744,   53.5772727272727,\n           2019.10144927536,   52.4181818181818,\n           2019.10144927536,   52.4181818181818,\n           2020.02898550725,   52.7272727272727,\n           2020.02898550725,   52.7272727272727,\n            2020.4154589372,   53.8863636363636,\n           2021,   54.6,\n           2022,   54.6\n         )|> \n  mutate(\n    fecha = round(fecha),\n    fecha = ymd(paste0(fecha,\"-01-01\"))\n  ) |> \n  summarise(\n    valor = round(mean(valor),1),\n    .by = fecha\n  ) |> \n  mutate(\n    pregunta = \"Expect own more\\nthan parents\"\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\n\ndf <- bind_rows(df1, df2, df3) |> \n  mutate(\n    generacion = case_when(\n      between(year(fecha),1976,1981) ~ \"Baby\\nBoomers\",\n      between(year(fecha),1982,1998) ~ \"Gen X\",\n      between(year(fecha),1999,2010) ~ \"Milenials\",\n      between(year(fecha),2011,2023) ~ \"Gen Z\",\n      .default = NA_character_\n    )\n  )\n\ndf <- df |> \n  mutate(\n    label = if_else(\n      condition = year(fecha) %in% c(1982, 1998,2011,2022),\n      true = paste0(valor,\"%\"),\n      false = NA\n    ),\n    pregunta = fct_relevel(pregunta,\"Expect own more\\nthan parents\", after = Inf)\n  ) |> \n  mutate(\n    dir_label = if_else(\n      condition = tail(valor,1) - head(valor,1) < 0,\n      true = \"abajo\",\n      false = \"arriba\"\n    ),\n    .by = c(pregunta, generacion)\n  ) \n```\n:::\n\n\n\n\n## Paso 5: Crea el gráfico final\n\nEstuve varios días pensando en cómo explicar este código de forma sencilla y mi conclusión, en la que puedo estar equivocado perfectamente, es que si hay una explicación, sería muy larga para un post de este blog. Por lo tanto, hagamos un trato: por ahora, intenta ejecutar el código y experimenta con él. En futuras entregas, iremos agregando gráficos más simples que te ayudarán a entender lo que se necesita para generar este plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_date <- \\(x){\n  x <- year(x)\n  if_else(x%%1000 != 0,\n          paste0(\"'\",x%%100),\n          as.character(x))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = df,\n  mapping = aes(\n    x = fecha,\n    y = valor,\n    color = generacion,\n    label = label,\n    group = 1\n  )\n) +\n  labs(\n    title = \"Future outcome expectations among U.S. 12th graders\",\n    y = \"\",\n    x = \"\"\n  ) +\n  geom_line(linewidth = 2.5, lineend = \"round\") +\n  geom_point(\n    data = filter(df, !is.na(label)),\n    mapping = aes(\n      color = stage(\n        start = generacion,\n        after_scale = darken(color, 0.2)\n        )\n    ),\n    size = 2.5\n  ) +\n  geom_point(\n    data = filter(df, !is.na(label)),\n    color = \"black\",\n    fill = NA,\n    shape = 21,\n    size = 5\n  ) +\n  geom_text_repel(\n    direction = \"y\",\n    color = \"black\",\n    nudge_y = if_else(\n      df$dir_label == \"arriba\",\n      true = 8,\n      false = -8\n    ),\n    hjust = 0.5,\n    fontface = \"bold\",\n    size = 4.5,\n    point.padding = 0.7\n  ) +\n  scale_color_manual(\n    values = c(\n      \"Baby\\nBoomers\" = \"#b4d6f0\",\n      \"Gen X\" = \"#76bbe8\",\n      \"Milenials\" = \"#2598dd\",\n      \"Gen Z\" = \"#673c8e\"\n    ),\n    guide = \"none\"\n  ) +\n  scale_y_continuous(\n    breaks = c(25,50,75),\n    expand = expand_scale(mult = c(0.1,0.25)),\n    labels = \\(x) paste0(x,\"%\")\n  ) +\n  scale_x_date(\n    labels = format_date,\n    minor_breaks = ymd(\"1976-01-01\") + years(0:45),\n    guide = \"axis_minor\",\n    expand = expand_scale(mult = c(0.05,0.1))\n  ) +\n  facet_wrap(~pregunta)+\n  guides(\n    custom2 = guide_custom(\n      width = unit(4,\"cm\"),\n      height = unit(3,\"cm\"),\n      grob = legend1,\n      order = 2\n    ),\n    custom = guide_custom(\n    width = unit(5,\"cm\"),\n    height = unit(3,\"cm\"),\n    grob = legend2,\n    order = 1\n  )) +\n  theme_minimal(base_size = 16)+\n  theme(\n    legend.position = \"top\",\n    legend.justification = \"center\",\n    legend.margin = margin(t = -5, b = -30,0),\n    plot.margin = margin(10,10,10,10),\n    plot.title = element_text(\n      face = \"bold\",\n      hjust = 0.45,\n      size = 16,\n      margin = margin(b = 15, t = 10)\n      ),\n    strip.text = element_text(\n      size = 16,\n      margin = margin(b = 5, t = 15)),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    axis.ticks.x = element_line(),\n    axis.ticks.length = unit(5,\"pt\"),\n    ggh4x.axis.ticks.length.minor = rel(0.5)\n  )\n```\n:::\n\n\n\n![](plot_wsj.jpg)\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Conclusión\n\nAunque hay diferencias notables, como el uso de las tipografías, colores y otros detalles, creo que logramos una similitud razonable. El gráfico original está hecho con la herramienta [Datawrapper](https://www.datawrapper.de), muy usada por periodistas y una excelente alternativa si te quieres evitar tanto código, pero... como dije al inicio de este post, solo buscamos explorar las capacidades del paquete.\n\n---\n\n<script defer src=\"https://rstudio-commentoplusplus.n5hlxm.easypanel.host/js/commento.js\"></script>\n<div id=\"commento\"></div>\n",
    "supporting": [
      "002_custom_legend_ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}