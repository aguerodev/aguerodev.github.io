{
  "hash": "e380f4dac251455fc5b93b35180f5dd4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Si usas dplyr, debes aprender a usar across y where\"\ndescription: \"Aprende a usar las funciones across y where de dplyr para realizar operaciones en m√∫ltiples columnas de manera eficiente. Estas herramientas mejoran la manipulaci√≥n y el procesamiento de datos en R.\"\ndate: 2024-05-30\ncategories: ['Tutorial', 'dplyr','across','where']\nlang: \"es\"\nimage: images/dplyr_across_blank.png\ncomments:\n  utterances:\n    repo: quarto-dev/quarto-docs\ntoc: true\ncode-line-numbers: true\ncode-copy: true\ntoc-location: left\nformat: html\neditor_options: \n  chunk_output_type: console\nexecute: \n  freeze: true\nauthor:\n  - name: Carlos Aguero\n    affiliation: Aprende Tidyverse\n    affiliation-url: https://aprendetidyverse.com/\ncitation: true\n---\n\n\n\n\n\nSi trabajas con datos, hay dos situaciones comunes que seguro has tenido que resolver. La primera es seleccionar o filtrar tus datos considerando el tipo de datos de alguna variable. Por ejemplo, ACP o un clustering jer√°rquico, es necesario seleccionar solo las variables num√©ricas. La segunda situaci√≥n es cuando necesitas aplicar una funci√≥n a todas las columnas de tu tabla, como escalar todas las columnas aplicando la misma funci√≥n, por ejemplo, `scale`, a cada columna o a cada columna num√©rica.\n\nEstos escenarios se vuelven f√°ciles de escribir y leer cuando utilizamos las funciones `across` y `where` de `dplyr`. Con `across`, puedes aplicar una funci√≥n a m√∫ltiples columnas simult√°neamente, y con `where`, puedes filtrar columnas bas√°ndote en condiciones espec√≠ficas, como su tipo de dato.\n\nLa mejor forma de explicar esto es usando ejemplos concretos. A continuaci√≥n, veamos una serie de casos y c√≥mo resolverlos con estas funciones.\n\nPara estos ejemplos usaremos un dataset que me encanta, llamado pinguinos üêß. Se presenta como una alternativa al t√≠pico dataset iris, el cual, no s√© vos, pero al menos yo ya estoy un poco harto üíï. Originalmente presentado en el paquete [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/) desarrollado por [Allison Horst](https://orcid.org/0000-0002-6047-5564), [Alison Hill](https://orcid.org/0000-0002-8082-1890) y [Kristen Gorman](https://orcid.org/0000-0002-0258-9264), y luego traducido al espa√±ol por el paquete [datos](https://cran.r-project.org/web/packages/datos/index.html), una hermosa contribuci√≥n de [Riva Quiroga](https://orcid.org/0000-0002-1147-4135), Edgar Ruiz, Mauricio Vargas, [Mauro Lepore](https://orcid.org/0000-0002-1986-7988), Rayna Harris, Daniela Vasquez y Joshua Kunst.\n\n## Ejemplo 1: Seleccionar solamente las variables num√©ricas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(datos)\nglimpse(pinguinos)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ especie         <fct> Adelia, Adelia, Adelia, Adelia, Adelia, Adelia, Adelia‚Ä¶\n$ isla            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgersen,‚Ä¶\n$ largo_pico_mm   <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42‚Ä¶\n$ alto_pico_mm    <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20‚Ä¶\n$ largo_aleta_mm  <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, ‚Ä¶\n$ masa_corporal_g <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 42‚Ä¶\n$ sexo            <fct> macho, hembra, hembra, NA, hembra, macho, hembra, mach‚Ä¶\n$ anio            <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, ‚Ä¶\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- select(pinguinos,where(is.numeric))\nglimpse(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 5\n$ largo_pico_mm   <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42‚Ä¶\n$ alto_pico_mm    <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20‚Ä¶\n$ largo_aleta_mm  <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, ‚Ä¶\n$ masa_corporal_g <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 42‚Ä¶\n$ anio            <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, ‚Ä¶\n```\n\n\n:::\n:::\n\n\n\nPodemos, a la funci√≥n `where`, pasar cualquier funci√≥n que reciba un vector y retorne un `TRUE/FALSE`, lo cual es √∫til al combinarlo con las funciones que R ya nos provee para verificar tipos como `is.numeric`, `is.factor`, `is.character`, `is.logical`. O podr√≠amos, ¬øpor qu√© no?, escribir nuestras propias funciones cortas.\n\nPor ejemplo, quiero las columnas que no contengan valores ausentes `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(pinguinos, where(\\(x) all(!is.na(x))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 √ó 3\n   especie isla       anio\n   <fct>   <fct>     <int>\n 1 Adelia  Torgersen  2007\n 2 Adelia  Torgersen  2007\n 3 Adelia  Torgersen  2007\n 4 Adelia  Torgersen  2007\n 5 Adelia  Torgersen  2007\n 6 Adelia  Torgersen  2007\n 7 Adelia  Torgersen  2007\n 8 Adelia  Torgersen  2007\n 9 Adelia  Torgersen  2007\n10 Adelia  Torgersen  2007\n# ‚Ñπ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Ejemplo 2: Escalar todas las variables num√©ricas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npinguinos |> \n  mutate(\n    across(\n      where(is.numeric),\n      \\(x) as.vector(scale(x))\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 √ó 8\n   especie isla  largo_pico_mm alto_pico_mm largo_aleta_mm masa_corporal_g sexo \n   <fct>   <fct>         <dbl>        <dbl>          <dbl>           <dbl> <fct>\n 1 Adelia  Torg‚Ä¶        -0.883        0.784         -1.42          -0.563  macho\n 2 Adelia  Torg‚Ä¶        -0.810        0.126         -1.06          -0.501  hemb‚Ä¶\n 3 Adelia  Torg‚Ä¶        -0.663        0.430         -0.421         -1.19   hemb‚Ä¶\n 4 Adelia  Torg‚Ä¶        NA           NA             NA             NA      <NA> \n 5 Adelia  Torg‚Ä¶        -1.32         1.09          -0.563         -0.937  hemb‚Ä¶\n 6 Adelia  Torg‚Ä¶        -0.847        1.75          -0.776         -0.688  macho\n 7 Adelia  Torg‚Ä¶        -0.920        0.329         -1.42          -0.719  hemb‚Ä¶\n 8 Adelia  Torg‚Ä¶        -0.865        1.24          -0.421          0.590  macho\n 9 Adelia  Torg‚Ä¶        -1.80         0.480         -0.563         -0.906  <NA> \n10 Adelia  Torg‚Ä¶        -0.352        1.54          -0.776          0.0602 <NA> \n# ‚Ñπ 334 more rows\n# ‚Ñπ 1 more variable: anio <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Ejemplo 3: Resumir todas la variables num√©ricas calculando la media\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npinguinos |> \n  summarise(across(where(is.numeric), mean,\n    na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `summarise()`.\n‚Ñπ In argument: `across(where(is.numeric), mean, na.rm = TRUE)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 5\n  largo_pico_mm alto_pico_mm largo_aleta_mm masa_corporal_g  anio\n          <dbl>        <dbl>          <dbl>           <dbl> <dbl>\n1          43.9         17.2           201.           4202. 2008.\n```\n\n\n:::\n:::\n\n\n\n## Ejemplo 4: Resumir todas la variables num√©ricas calculando la media y la mediana\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- pinguinos |> \n  summarise(across(\n    .cols = where(is.numeric),\n    .fns = list(media = mean, mediana = median),\n    na.rm = TRUE)\n  )\n\nglimpse(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 10\n$ largo_pico_mm_media     <dbl> 43.92193\n$ largo_pico_mm_mediana   <dbl> 44.45\n$ alto_pico_mm_media      <dbl> 17.15117\n$ alto_pico_mm_mediana    <dbl> 17.3\n$ largo_aleta_mm_media    <dbl> 200.9152\n$ largo_aleta_mm_mediana  <dbl> 197\n$ masa_corporal_g_media   <dbl> 4201.754\n$ masa_corporal_g_mediana <dbl> 4050\n$ anio_media              <dbl> 2008.029\n$ anio_mediana            <dbl> 2008\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npinguinos |> \n  summarise(across(where(is.numeric), list(mean = mean,media = median), .names = \"{col}_{fn}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 10\n  largo_pico_mm_mean largo_pico_mm_media alto_pico_mm_mean alto_pico_mm_media\n               <dbl>               <dbl>             <dbl>              <dbl>\n1                 NA                  NA                NA                 NA\n# ‚Ñπ 6 more variables: largo_aleta_mm_mean <dbl>, largo_aleta_mm_media <int>,\n#   masa_corporal_g_mean <dbl>, masa_corporal_g_media <int>, anio_mean <dbl>,\n#   anio_media <dbl>\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}