---
title: "Si usas dplyr, debes aprender a usar across y where"
description: "Aprende a usar las funciones across y where de dplyr para realizar operaciones en m√∫ltiples columnas de manera eficiente. Estas herramientas mejoran la manipulaci√≥n y el procesamiento de datos en R."
date: 2024-05-30
categories: ['Tutorial', 'dplyr','across','where']
lang: "es"
image: images/dplyr_across_blank.png
comments:
  utterances:
    repo: quarto-dev/quarto-docs
toc: true
code-line-numbers: true
code-copy: true
toc-location: left
format: html
editor_options: 
  chunk_output_type: console
execute: 
  freeze: true
author:
  - name: Carlos Aguero
    affiliation: Aprende Tidyverse
    affiliation-url: https://aprendetidyverse.com/
citation: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, dpi = 400, fig.width = 8, fig.height = 6)
```

Si trabajas con datos, hay dos situaciones comunes que seguro has tenido que resolver. La primera es seleccionar o filtrar tus datos considerando el tipo de datos de alguna variable. Por ejemplo, ACP o un clustering jer√°rquico, es necesario seleccionar solo las variables num√©ricas. La segunda situaci√≥n es cuando necesitas aplicar una funci√≥n a todas las columnas de tu tabla, como escalar todas las columnas aplicando la misma funci√≥n, por ejemplo, `scale`, a cada columna o a cada columna num√©rica.

Estos escenarios se vuelven f√°ciles de escribir y leer cuando utilizamos las funciones `across` y `where` de `dplyr`. Con `across`, puedes aplicar una funci√≥n a m√∫ltiples columnas simult√°neamente, y con `where`, puedes filtrar columnas bas√°ndote en condiciones espec√≠ficas, como su tipo de dato.

La mejor forma de explicar esto es usando ejemplos concretos. A continuaci√≥n, veamos una serie de casos y c√≥mo resolverlos con estas funciones.

Para estos ejemplos usaremos un dataset que me encanta, llamado pinguinos üêß. Se presenta como una alternativa al t√≠pico dataset iris, el cual, no s√© vos, pero al menos yo ya estoy un poco harto üíï. Originalmente presentado en el paquete [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/) desarrollado por [Allison Horst](https://orcid.org/0000-0002-6047-5564), [Alison Hill](https://orcid.org/0000-0002-8082-1890) y [Kristen Gorman](https://orcid.org/0000-0002-0258-9264), y luego traducido al espa√±ol por el paquete [datos](https://cran.r-project.org/web/packages/datos/index.html), una hermosa contribuci√≥n de [Riva Quiroga](https://orcid.org/0000-0002-1147-4135), Edgar Ruiz, Mauricio Vargas, [Mauro Lepore](https://orcid.org/0000-0002-1986-7988), Rayna Harris, Daniela Vasquez y Joshua Kunst.

## Ejemplo 1: Seleccionar solamente las variables num√©ricas


```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(datos)
glimpse(pinguinos)
```

```{r}
x <- select(pinguinos,where(is.numeric))
glimpse(x)
```

Podemos, a la funci√≥n `where`, pasar cualquier funci√≥n que reciba un vector y retorne un `TRUE/FALSE`, lo cual es √∫til al combinarlo con las funciones que R ya nos provee para verificar tipos como `is.numeric`, `is.factor`, `is.character`, `is.logical`. O podr√≠amos, ¬øpor qu√© no?, escribir nuestras propias funciones cortas.

Por ejemplo, quiero las columnas que no contengan valores ausentes `NA`.

```{r}
select(pinguinos, where(\(x) all(!is.na(x))))
```


## Ejemplo 2: Escalar todas las variables num√©ricas

```{r}
pinguinos |> 
  mutate(
    across(
      where(is.numeric),
      \(x) as.vector(scale(x))
    )
  )
```

## Ejemplo 3: Resumir todas la variables num√©ricas calculando la media

```{r}
pinguinos |> 
  summarise(across(where(is.numeric), mean,
    na.rm = TRUE))
```

## Ejemplo 4: Resumir todas la variables num√©ricas calculando la media y la mediana

```{r}
x <- pinguinos |> 
  summarise(across(
    .cols = where(is.numeric),
    .fns = list(media = mean, mediana = median),
    na.rm = TRUE)
  )

glimpse(x)
```


```{r}
pinguinos |> 
  summarise(across(where(is.numeric), list(mean = mean,media = median), .names = "{col}_{fn}"))
```